#!/usr/bin/env bash

# ANSI color escape codes
BOLD_RED='\033[1;31m'
NC='\033[0m' # No color

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Get the list of files in the staging area
staged_files=$(git diff-index --cached --name-only --diff-filter=A -z $against | LC_ALL=C tr '\0' '\n')

# Get the list of offending filenames
# Loop through each file in the staging area
while IFS= read -r file; do
    # Check if the file has non-ASCII characters
    if [ "$allownonascii" != "true" ] && [[ $(echo "$file" | LC_ALL=C grep -P "[^\x00-\x7F]") ]]; then
        offending_files="$offending_files$file"$'\n'
    fi
done <<< "$staged_files"

# Strip trailing newline from offending_files variable
offending_files="${offending_files%$'\n'}"

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] && [ -n "$offending_files" ]
then
    echo "Error: Attempt to add a non-ASCII file name."
    echo ""
    echo "Offending files:"
    echo -e "${BOLD_RED}$offending_files${NC}"
    echo ""
    echo "This can cause problems if you want to work with people on other platforms."
    echo "To be portable it is advisable to rename the file."
    echo "If you know what you are doing you can disable this check using:"
    echo ""
    echo "  git config hooks.allownonascii true"
    exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --
